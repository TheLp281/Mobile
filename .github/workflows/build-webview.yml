name: Build React Native APK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y openjdk-11-jdk curl wget unzip

      - name: Install Node.js using NVM
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install --lts

      - name: Install Android SDK
        run: |
          ANDROID_SDK_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          SDK_DIR="$HOME/Android/Sdk"
          mkdir -p "$SDK_DIR/cmdline-tools"
          wget -q "$ANDROID_SDK_URL" -O cmdline-tools.zip
          unzip cmdline-tools.zip -d "$SDK_DIR/cmdline-tools"
          mv "$SDK_DIR/cmdline-tools/cmdline-tools" "$SDK_DIR/cmdline-tools/latest"
          rm cmdline-tools.zip
          echo "export ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "export PATH=$SDK_DIR/cmdline-tools/latest/bin:$SDK_DIR/platform-tools:$SDK_DIR/emulator:$PATH" >> $GITHUB_ENV

      - name: Load environment variables
        run: source $GITHUB_ENV

      - name: Accept Android licenses
        run: |
          export ANDROID_HOME="$HOME/Android/Sdk"
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
          yes | sdkmanager --licenses

      - name: Install Android SDK components
        run: |
          export ANDROID_HOME="$HOME/Android/Sdk"
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      - name: Create React Native WebView App
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          npx @react-native-community/cli init LiventCord
          cd LiventCord
          echo "sdk.dir=$HOME/Android/Sdk" > android/local.properties
          npm install react-native-webview
          
      - name: Install Navigation Bar Color Module
        run: |
          cd LiventCord
          npm install react-native-navigation-bar-color
          
      - name: Setup React Native WebView with Local HTTP Server (Media Bridge)
        run: |
          cd LiventCord
          npm install react-native-webview react-native-safe-area-context react-native-navigation-bar-color react-native-fs https://github.com/nmartinezb3/react-native-http-server.git --legacy-peer-deps
      
      - name: Patch http-server-react-native Gradle build file
        run: |
          sed -i 's/compile(/implementation(/g' LiventCord/node_modules/http-server-react-native/android/build.gradle
      
      - name: Create App.js and continue...
        run: |
          cd LiventCord
          cat <<EOF > App.js
          import React, { useEffect, useRef, useState } from 'react';
          import { View, StyleSheet, Platform, StatusBar } from 'react-native';
          import { WebView } from 'react-native-webview';
          import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
          import changeNavigationBarColor from 'react-native-navigation-bar-color';
          import { HttpServer } from 'react-native-http-server';
          import RNFS from 'react-native-fs';
      
          const MEDIA_DIR = RNFS.DocumentDirectoryPath + '/media';
      
          const App = () => {
            const webViewRef = useRef(null);
            const [origin, setOrigin] = useState(null);
            const insets = useSafeAreaInsets();
      
            useEffect(() => {
              StatusBar.setBackgroundColor('#151319');
              StatusBar.setBarStyle('light-content');
      
              if (Platform.OS === 'android') {
                changeNavigationBarColor('#2d2d32', false, false);
              }
      
              const startServer = async () => {
                await RNFS.mkdir(MEDIA_DIR);
      
                const server = new HttpServer({ port: 8080 });
      
                server.get('/media/:filename', async (req) => {
                  const filePath = \`\${MEDIA_DIR}/\${req.params.filename}\`;
                  const exists = await RNFS.exists(filePath);
                  if (!exists) {
                    return { status: 404, body: 'File not found' };
                  }
                  const contentType = filePath.endsWith('.mp4') ? 'video/mp4' : 'image/jpeg';
                  const fileData = await RNFS.readFile(filePath, 'base64');
                  return {
                    status: 200,
                    headers: { 'Content-Type': contentType },
                    body: Buffer.from(fileData, 'base64'),
                    isBase64Encoded: true,
                  };
                });
      
                await server.start();
                setOrigin('http://localhost:8080');
              };
      
              startServer();
            }, []);
      
            const handleMessage = async (event) => {
              const msg = JSON.parse(event.nativeEvent.data);
              if (msg.type === 'load-media') {
                const filePath = \`\${MEDIA_DIR}/\${msg.name}\`;
                if (!(await RNFS.exists(filePath))) {
                  await RNFS.downloadFile({ fromUrl: msg.url, toFile: filePath }).promise;
                }
                webViewRef.current?.postMessage(JSON.stringify({
                  type: 'media-loaded',
                  tagId: msg.tagId,
                  url: \`\${origin}/media/\${msg.name}\`,
                }));
              }
            };
      
            const injectedJS = \`
              window.nativeMedia = {
                load(tagId, fileName, url) {
                  window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'load-media',
                    tagId,
                    name: fileName,
                    url
                  }));
                },
              };
      
              document.addEventListener('message', function(event) {
                const data = JSON.parse(event.data);
                if (data.type === 'media-loaded') {
                  const el = document.getElementById(data.tagId);
                  if (el) el.src = data.url;
                }
              });
            \`;
      
            return (
              <SafeAreaProvider>
                <View style={[styles.container, { paddingTop: insets.top, paddingBottom: insets.bottom }]}>
                  {origin && (
                    <WebView
                      ref={webViewRef}
                      originWhitelist={['*']}
                      onMessage={handleMessage}
                      injectedJavaScriptBeforeContentLoaded={injectedJS}
                      allowFileAccess
                      allowUniversalAccessFromFileURLs
                    />
                  )}
                </View>
              </SafeAreaProvider>
            );
          };
      
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#151319',
            },
          });
      
          export default App;
          EOF


      - name: Generate keystore
        run: |
          cd LiventCord
          keytool -genkeypair -v -storetype PKCS12 -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-key-alias -dname "CN=Your Name, OU=Your Org, O=Your Company, L=Your City, S=Your State, C=Your Country" -storepass yourpassword -keypass yourpassword
          mv my-release-key.jks android/app/

      - name: Configure Gradle signing
        run: |
          cd LiventCord
          cat <<EOF >> android/app/build.gradle

          android {
              signingConfigs {
                  release {
                      storeFile file('my-release-key.jks')
                      storePassword 'yourpassword'
                      keyAlias 'my-key-alias'
                      keyPassword 'yourpassword'
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF
      - name: Disable Fabric & Codegen
        run: |
          cd LiventCord
          echo "newArchEnabled=false" >> android/gradle.properties

      - name: Build release APK
        run: |
          cd LiventCord/android
          ./gradlew assembleRelease

      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ inputs.version }}
          tag_name: v${{ inputs.version }}
          files: LiventCord/android/app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
